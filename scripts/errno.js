/**
 * @file scripts/errno.js
 * @description Fork of 'node-errno' but up-to-date with the new libuv.
 * @copyright 2018-present Karim Alibhai. All rights reserved.
 */

const fs = require('fs')
const path = require('path')
const request = require('request')

const projectRoot = 'https://raw.githubusercontent.com/libuv/libuv'
const libuvH = projectRoot + '/v1.x/include/uv.h'
const libuvErrnoH = projectRoot + '/v1.x/include/uv-errno.h'

// captures errno descriptions that look like this:
//   XX(E2BIG, "argument list too long")
const errorDesc = /^\s*XX\((E[A-Z_0-9]+),\s*\"(.*)\"\)/

// captures errno definitions that look like this:
// #define UV__EAI_ADDRFAMILY  (-3000)
const errorNo = /^#define\s*UV__(E[A-Z_0-9]+)\s*\((\-?[0-9]+)\)/

function getData(url) {
  return new Promise((resolve, reject) => {
    request(url, (err, res) => {
      if (err) reject(err)
      else if (!res) reject(new Error('Unknown error'))
      else if (res.statusCode > 399) reject(new Error(`Unknown error: ${res.statusCode}`))
      else resolve(res.body)
    })
  })
}

(async () => {
  const errorCodes = {}

  ;(await getData(libuvH))
    .split('\n')
    .map(line => line.match(errorDesc))
    .filter(Boolean)
    .forEach(match => {
      const code = match[1]

      errorCodes[code] = {
        code,
        description: match[2],
      }
    })

  ;(await getData(libuvErrnoH))
    .split('\n')
    .map(line => line.match(errorNo))
    .filter(Boolean)
    .forEach(match => {
      const code = match[1]

      if (!errorCodes[code]) {
        throw new Error(`Unable to find error: ${code}`)
      }

      errorCodes[code].errno = parseInt(match[2], 10)
    })

  // ENOTFOUND is a mistake that node made a while ago
  // and is still living with
  errorCodes.ENOTFOUND = {
    code: 'ENOTFOUND',
    errno: 'ENOTFOUND',
    description: 'ENOTFOUND',
  }

  // ENOTFOUND is actually the error used for some other failures
  // See: https://github.com/nodejs/node/blob/12b9ec09b0807a0b362986c80d3c4b9a644c611e/lib/internal/errors.js#L543
  errorCodes.EAI_MEMORY =
  errorCodes.EAI_NODATA =
  errorCodes.EAI_NONAME =
    errorCodes.ENOTFOUND

  const defn = []

  for (const code in errorCodes) {
    if (errorCodes[code]) {
      // some errors have this weird behavior in node
      if (errorCodes[code].errno === undefined) {
        errorCodes[code].errno = code
      }

      defn.push(
        `
        /**
         * ${errorCodes[code].description}
         */
        export const ${code} = ${JSON.stringify(errorCodes[code], null, 2)}
        `
      )
    }
  }

  fs.writeFileSync(
    path.resolve(__dirname, '..', 'src', 'frenzie', 'errno.js'),
    '// autogenerated - do not edit\n' + defn.join('\n\n')
  )
})().catch(err => {
  console.error(err)
  process.exit(-1)
})
