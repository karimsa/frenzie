/**
 * @file src/frenzie/errno.js
 * @description Contains errno definitions parsed from libuv.
 * @license MIT
 * @copyright 2018-present Karim Alibhai.
 */

// AUTOGENERATED - DO NOT EDIT
// Updated at: Thu, 29 Mar 2018 00:35:27 GMT

/**
 * Could not find GetNetworkParams function
 */
export const ARES_EADDRGETNETWORKPARAMS = {
  "code": "ARES_EADDRGETNETWORKPARAMS",
  "errno": 23,
  "description": "Could not find GetNetworkParams function"
}

/**
 * Unsupported address family
 */
export const ARES_EBADFAMILY = {
  "code": "ARES_EBADFAMILY",
  "errno": 9,
  "description": "Unsupported address family"
}

/**
 * Illegal flags specified
 */
export const ARES_EBADFLAGS = {
  "code": "ARES_EBADFLAGS",
  "errno": 18,
  "description": "Illegal flags specified"
}

/**
 * Illegal hints flags specified
 */
export const ARES_EBADHINTS = {
  "code": "ARES_EBADHINTS",
  "errno": 20,
  "description": "Illegal hints flags specified"
}

/**
 * Misformatted domain name
 */
export const ARES_EBADNAME = {
  "code": "ARES_EBADNAME",
  "errno": 8,
  "description": "Misformatted domain name"
}

/**
 * Misformatted DNS query
 */
export const ARES_EBADQUERY = {
  "code": "ARES_EBADQUERY",
  "errno": 7,
  "description": "Misformatted DNS query"
}

/**
 * Misformatted DNS reply
 */
export const ARES_EBADRESP = {
  "code": "ARES_EBADRESP",
  "errno": 10,
  "description": "Misformatted DNS reply"
}

/**
 * Misformatted string
 */
export const ARES_EBADSTR = {
  "code": "ARES_EBADSTR",
  "errno": 17,
  "description": "Misformatted string"
}

/**
 * DNS query cancelled
 */
export const ARES_ECANCELLED = {
  "code": "ARES_ECANCELLED",
  "errno": 24,
  "description": "DNS query cancelled"
}

/**
 * Could not contact DNS servers
 */
export const ARES_ECONNREFUSED = {
  "code": "ARES_ECONNREFUSED",
  "errno": 11,
  "description": "Could not contact DNS servers"
}

/**
 * Channel is being destroyed
 */
export const ARES_EDESTRUCTION = {
  "code": "ARES_EDESTRUCTION",
  "errno": 16,
  "description": "Channel is being destroyed"
}

/**
 * Error reading file
 */
export const ARES_EFILE = {
  "code": "ARES_EFILE",
  "errno": 14,
  "description": "Error reading file"
}

/**
 * DNS server claims query was misformatted
 */
export const ARES_EFORMERR = {
  "code": "ARES_EFORMERR",
  "errno": 2,
  "description": "DNS server claims query was misformatted"
}

/**
 * Error loading iphlpapi.dll
 */
export const ARES_ELOADIPHLPAPI = {
  "code": "ARES_ELOADIPHLPAPI",
  "errno": 22,
  "description": "Error loading iphlpapi.dll"
}

/**
 * DNS server returned answer with no data
 */
export const ARES_ENODATA = {
  "code": "ARES_ENODATA",
  "errno": 1,
  "description": "DNS server returned answer with no data"
}

/**
 * Out of memory
 */
export const ARES_ENOMEM = {
  "code": "ARES_ENOMEM",
  "errno": 15,
  "description": "Out of memory"
}

/**
 * Given hostname is not numeric
 */
export const ARES_ENONAME = {
  "code": "ARES_ENONAME",
  "errno": 19,
  "description": "Given hostname is not numeric"
}

/**
 * Domain name not found
 */
export const ARES_ENOTFOUND = {
  "code": "ARES_ENOTFOUND",
  "errno": 4,
  "description": "Domain name not found"
}

/**
 * DNS server does not implement requested operation
 */
export const ARES_ENOTIMP = {
  "code": "ARES_ENOTIMP",
  "errno": 5,
  "description": "DNS server does not implement requested operation"
}

/**
 * c-ares library initialization not yet performed
 */
export const ARES_ENOTINITIALIZED = {
  "code": "ARES_ENOTINITIALIZED",
  "errno": 21,
  "description": "c-ares library initialization not yet performed"
}

/**
 * End of file
 */
export const ARES_EOF = {
  "code": "ARES_EOF",
  "errno": 13,
  "description": "End of file"
}

/**
 * DNS server refused query
 */
export const ARES_EREFUSED = {
  "code": "ARES_EREFUSED",
  "errno": 6,
  "description": "DNS server refused query"
}

/**
 * DNS server returned general failure
 */
export const ARES_ESERVFAIL = {
  "code": "ARES_ESERVFAIL",
  "errno": 3,
  "description": "DNS server returned general failure"
}

/**
 * Timeout while contacting DNS servers
 */
export const ARES_ETIMEOUT = {
  "code": "ARES_ETIMEOUT",
  "errno": 12,
  "description": "Timeout while contacting DNS servers"
}

/**
 * argument list too long
 */
export const E2BIG = {
  "code": "E2BIG",
  "description": "argument list too long",
  "errno": "E2BIG"
}

/**
 * permission denied
 */
export const EACCES = {
  "code": "EACCES",
  "description": "permission denied",
  "errno": "EACCES"
}

/**
 * address already in use
 */
export const EADDRINUSE = {
  "code": "EADDRINUSE",
  "description": "address already in use",
  "errno": "EADDRINUSE"
}

/**
 * address not available
 */
export const EADDRNOTAVAIL = {
  "code": "EADDRNOTAVAIL",
  "description": "address not available",
  "errno": "EADDRNOTAVAIL"
}

/**
 * Advertise error 
 */
export const EADV = {
  "code": "EADV",
  "errno": 68,
  "description": "Advertise error "
}

/**
 * address family not supported
 */
export const EAFNOSUPPORT = {
  "code": "EAFNOSUPPORT",
  "description": "address family not supported",
  "errno": "EAFNOSUPPORT"
}

/**
 * resource temporarily unavailable
 */
export const EAGAIN = {
  "code": "EAGAIN",
  "description": "resource temporarily unavailable",
  "errno": "EAGAIN"
}

/**
 * address family not supported
 */
export const EAI_ADDRFAMILY = {
  "code": "EAI_ADDRFAMILY",
  "description": "address family not supported",
  "errno": -3000
}

/**
 * temporary failure
 */
export const EAI_AGAIN = {
  "code": "EAI_AGAIN",
  "description": "temporary failure",
  "errno": -3001
}

/**
 * bad ai_flags value
 */
export const EAI_BADFLAGS = {
  "code": "EAI_BADFLAGS",
  "description": "bad ai_flags value",
  "errno": -3002
}

/**
 * invalid value for hints
 */
export const EAI_BADHINTS = {
  "code": "EAI_BADHINTS",
  "description": "invalid value for hints",
  "errno": -3013
}

/**
 * request canceled
 */
export const EAI_CANCELED = {
  "code": "EAI_CANCELED",
  "description": "request canceled",
  "errno": -3003
}

/**
 * permanent failure
 */
export const EAI_FAIL = {
  "code": "EAI_FAIL",
  "description": "permanent failure",
  "errno": -3004
}

/**
 * ai_family not supported
 */
export const EAI_FAMILY = {
  "code": "EAI_FAMILY",
  "description": "ai_family not supported",
  "errno": -3005
}

/**
 * ENOTFOUND
 */
export const EAI_MEMORY = {
  "code": "ENOTFOUND",
  "errno": "ENOTFOUND",
  "description": "ENOTFOUND"
}

/**
 * ENOTFOUND
 */
export const EAI_NODATA = {
  "code": "ENOTFOUND",
  "errno": "ENOTFOUND",
  "description": "ENOTFOUND"
}

/**
 * ENOTFOUND
 */
export const EAI_NONAME = {
  "code": "ENOTFOUND",
  "errno": "ENOTFOUND",
  "description": "ENOTFOUND"
}

/**
 * argument buffer overflow
 */
export const EAI_OVERFLOW = {
  "code": "EAI_OVERFLOW",
  "description": "argument buffer overflow",
  "errno": -3009
}

/**
 * resolved protocol is unknown
 */
export const EAI_PROTOCOL = {
  "code": "EAI_PROTOCOL",
  "description": "resolved protocol is unknown",
  "errno": -3014
}

/**
 * service not available for socket type
 */
export const EAI_SERVICE = {
  "code": "EAI_SERVICE",
  "description": "service not available for socket type",
  "errno": -3010
}

/**
 * socket type not supported
 */
export const EAI_SOCKTYPE = {
  "code": "EAI_SOCKTYPE",
  "description": "socket type not supported",
  "errno": -3011
}

/**
 * connection already in progress
 */
export const EALREADY = {
  "code": "EALREADY",
  "description": "connection already in progress",
  "errno": "EALREADY"
}

/**
 * Invalid exchange 
 */
export const EBADE = {
  "code": "EBADE",
  "errno": 52,
  "description": "Invalid exchange "
}

/**
 * bad file descriptor
 */
export const EBADF = {
  "code": "EBADF",
  "description": "bad file descriptor",
  "errno": "EBADF"
}

/**
 * File descriptor in bad state 
 */
export const EBADFD = {
  "code": "EBADFD",
  "errno": 77,
  "description": "File descriptor in bad state "
}

/**
 * Not a data message 
 */
export const EBADMSG = {
  "code": "EBADMSG",
  "errno": 74,
  "description": "Not a data message "
}

/**
 * Invalid request descriptor 
 */
export const EBADR = {
  "code": "EBADR",
  "errno": 53,
  "description": "Invalid request descriptor "
}

/**
 * Invalid request code 
 */
export const EBADRQC = {
  "code": "EBADRQC",
  "errno": 56,
  "description": "Invalid request code "
}

/**
 * Invalid slot 
 */
export const EBADSLT = {
  "code": "EBADSLT",
  "errno": 57,
  "description": "Invalid slot "
}

/**
 * Bad font file format 
 */
export const EBFONT = {
  "code": "EBFONT",
  "errno": 59,
  "description": "Bad font file format "
}

/**
 * resource busy or locked
 */
export const EBUSY = {
  "code": "EBUSY",
  "description": "resource busy or locked",
  "errno": "EBUSY"
}

/**
 * operation canceled
 */
export const ECANCELED = {
  "code": "ECANCELED",
  "description": "operation canceled",
  "errno": "ECANCELED"
}

/**
 * invalid Unicode character
 */
export const ECHARSET = {
  "code": "ECHARSET",
  "description": "invalid Unicode character",
  "errno": "ECHARSET"
}

/**
 * Channel number out of range 
 */
export const ECHRNG = {
  "code": "ECHRNG",
  "errno": 44,
  "description": "Channel number out of range "
}

/**
 * Communication error on send 
 */
export const ECOMM = {
  "code": "ECOMM",
  "errno": 70,
  "description": "Communication error on send "
}

/**
 * software caused connection abort
 */
export const ECONNABORTED = {
  "code": "ECONNABORTED",
  "description": "software caused connection abort",
  "errno": "ECONNABORTED"
}

/**
 * connection refused
 */
export const ECONNREFUSED = {
  "code": "ECONNREFUSED",
  "description": "connection refused",
  "errno": "ECONNREFUSED"
}

/**
 * connection reset by peer
 */
export const ECONNRESET = {
  "code": "ECONNRESET",
  "description": "connection reset by peer",
  "errno": "ECONNRESET"
}

/**
 * Resource deadlock would occur 
 */
export const EDEADLK = {
  "code": "EDEADLK",
  "errno": 35,
  "description": "Resource deadlock would occur "
}

/**
 * destination address required
 */
export const EDESTADDRREQ = {
  "code": "EDESTADDRREQ",
  "description": "destination address required",
  "errno": "EDESTADDRREQ"
}

/**
 * RFS specific error 
 */
export const EDOTDOT = {
  "code": "EDOTDOT",
  "errno": 73,
  "description": "RFS specific error "
}

/**
 * Quota exceeded 
 */
export const EDQUOT = {
  "code": "EDQUOT",
  "errno": 122,
  "description": "Quota exceeded "
}

/**
 * file already exists
 */
export const EEXIST = {
  "code": "EEXIST",
  "description": "file already exists",
  "errno": "EEXIST"
}

/**
 * bad address in system call argument
 */
export const EFAULT = {
  "code": "EFAULT",
  "description": "bad address in system call argument",
  "errno": "EFAULT"
}

/**
 * file too large
 */
export const EFBIG = {
  "code": "EFBIG",
  "description": "file too large",
  "errno": "EFBIG"
}

/**
 * host is down
 */
export const EHOSTDOWN = {
  "code": "EHOSTDOWN",
  "description": "host is down",
  "errno": "EHOSTDOWN"
}

/**
 * host is unreachable
 */
export const EHOSTUNREACH = {
  "code": "EHOSTUNREACH",
  "description": "host is unreachable",
  "errno": "EHOSTUNREACH"
}

/**
 * Memory page has hardware error 
 */
export const EHWPOISON = {
  "code": "EHWPOISON",
  "errno": 133,
  "description": "Memory page has hardware error "
}

/**
 * Identifier removed 
 */
export const EIDRM = {
  "code": "EIDRM",
  "errno": 43,
  "description": "Identifier removed "
}

/**
 * Illegal byte sequence 
 */
export const EILSEQ = {
  "code": "EILSEQ",
  "errno": 84,
  "description": "Illegal byte sequence "
}

/**
 * Operation now in progress 
 */
export const EINPROGRESS = {
  "code": "EINPROGRESS",
  "errno": 115,
  "description": "Operation now in progress "
}

/**
 * interrupted system call
 */
export const EINTR = {
  "code": "EINTR",
  "description": "interrupted system call",
  "errno": "EINTR"
}

/**
 * invalid argument
 */
export const EINVAL = {
  "code": "EINVAL",
  "description": "invalid argument",
  "errno": "EINVAL"
}

/**
 * i/o error
 */
export const EIO = {
  "code": "EIO",
  "description": "i/o error",
  "errno": "EIO"
}

/**
 * socket is already connected
 */
export const EISCONN = {
  "code": "EISCONN",
  "description": "socket is already connected",
  "errno": "EISCONN"
}

/**
 * illegal operation on a directory
 */
export const EISDIR = {
  "code": "EISDIR",
  "description": "illegal operation on a directory",
  "errno": "EISDIR"
}

/**
 * Is a named type file 
 */
export const EISNAM = {
  "code": "EISNAM",
  "errno": 120,
  "description": "Is a named type file "
}

/**
 * Key has expired 
 */
export const EKEYEXPIRED = {
  "code": "EKEYEXPIRED",
  "errno": 127,
  "description": "Key has expired "
}

/**
 * Key was rejected by service 
 */
export const EKEYREJECTED = {
  "code": "EKEYREJECTED",
  "errno": 129,
  "description": "Key was rejected by service "
}

/**
 * Key has been revoked 
 */
export const EKEYREVOKED = {
  "code": "EKEYREVOKED",
  "errno": 128,
  "description": "Key has been revoked "
}

/**
 * Can not access a needed shared library 
 */
export const ELIBACC = {
  "code": "ELIBACC",
  "errno": 79,
  "description": "Can not access a needed shared library "
}

/**
 * Accessing a corrupted shared library 
 */
export const ELIBBAD = {
  "code": "ELIBBAD",
  "errno": 80,
  "description": "Accessing a corrupted shared library "
}

/**
 * Cannot exec a shared library directly 
 */
export const ELIBEXEC = {
  "code": "ELIBEXEC",
  "errno": 83,
  "description": "Cannot exec a shared library directly "
}

/**
 * Attempting to link in too many shared libraries 
 */
export const ELIBMAX = {
  "code": "ELIBMAX",
  "errno": 82,
  "description": "Attempting to link in too many shared libraries "
}

/**
 * .lib section in a.out corrupted 
 */
export const ELIBSCN = {
  "code": "ELIBSCN",
  "errno": 81,
  "description": ".lib section in a.out corrupted "
}

/**
 * Link number out of range 
 */
export const ELNRNG = {
  "code": "ELNRNG",
  "errno": 48,
  "description": "Link number out of range "
}

/**
 * too many symbolic links encountered
 */
export const ELOOP = {
  "code": "ELOOP",
  "description": "too many symbolic links encountered",
  "errno": "ELOOP"
}

/**
 * Wrong medium type 
 */
export const EMEDIUMTYPE = {
  "code": "EMEDIUMTYPE",
  "errno": 124,
  "description": "Wrong medium type "
}

/**
 * too many open files
 */
export const EMFILE = {
  "code": "EMFILE",
  "description": "too many open files",
  "errno": "EMFILE"
}

/**
 * too many links
 */
export const EMLINK = {
  "code": "EMLINK",
  "description": "too many links",
  "errno": "EMLINK"
}

/**
 * message too long
 */
export const EMSGSIZE = {
  "code": "EMSGSIZE",
  "description": "message too long",
  "errno": "EMSGSIZE"
}

/**
 * Multihop attempted 
 */
export const EMULTIHOP = {
  "code": "EMULTIHOP",
  "errno": 72,
  "description": "Multihop attempted "
}

/**
 * name too long
 */
export const ENAMETOOLONG = {
  "code": "ENAMETOOLONG",
  "description": "name too long",
  "errno": "ENAMETOOLONG"
}

/**
 * No XENIX semaphores available 
 */
export const ENAVAIL = {
  "code": "ENAVAIL",
  "errno": 119,
  "description": "No XENIX semaphores available "
}

/**
 * network is down
 */
export const ENETDOWN = {
  "code": "ENETDOWN",
  "description": "network is down",
  "errno": "ENETDOWN"
}

/**
 * Network dropped connection because of reset 
 */
export const ENETRESET = {
  "code": "ENETRESET",
  "errno": 102,
  "description": "Network dropped connection because of reset "
}

/**
 * network is unreachable
 */
export const ENETUNREACH = {
  "code": "ENETUNREACH",
  "description": "network is unreachable",
  "errno": "ENETUNREACH"
}

/**
 * file table overflow
 */
export const ENFILE = {
  "code": "ENFILE",
  "description": "file table overflow",
  "errno": "ENFILE"
}

/**
 * No anode 
 */
export const ENOANO = {
  "code": "ENOANO",
  "errno": 55,
  "description": "No anode "
}

/**
 * no buffer space available
 */
export const ENOBUFS = {
  "code": "ENOBUFS",
  "description": "no buffer space available",
  "errno": "ENOBUFS"
}

/**
 * No CSI structure available 
 */
export const ENOCSI = {
  "code": "ENOCSI",
  "errno": 50,
  "description": "No CSI structure available "
}

/**
 * No data available 
 */
export const ENODATA = {
  "code": "ENODATA",
  "errno": 61,
  "description": "No data available "
}

/**
 * no such device
 */
export const ENODEV = {
  "code": "ENODEV",
  "description": "no such device",
  "errno": "ENODEV"
}

/**
 * no such file or directory
 */
export const ENOENT = {
  "code": "ENOENT",
  "description": "no such file or directory",
  "errno": "ENOENT"
}

/**
 * Required key not available 
 */
export const ENOKEY = {
  "code": "ENOKEY",
  "errno": 126,
  "description": "Required key not available "
}

/**
 * No record locks available 
 */
export const ENOLCK = {
  "code": "ENOLCK",
  "errno": 37,
  "description": "No record locks available "
}

/**
 * Link has been severed 
 */
export const ENOLINK = {
  "code": "ENOLINK",
  "errno": 67,
  "description": "Link has been severed "
}

/**
 * No medium found 
 */
export const ENOMEDIUM = {
  "code": "ENOMEDIUM",
  "errno": 123,
  "description": "No medium found "
}

/**
 * not enough memory
 */
export const ENOMEM = {
  "code": "ENOMEM",
  "description": "not enough memory",
  "errno": "ENOMEM"
}

/**
 * No message of desired type 
 */
export const ENOMSG = {
  "code": "ENOMSG",
  "errno": 42,
  "description": "No message of desired type "
}

/**
 * machine is not on the network
 */
export const ENONET = {
  "code": "ENONET",
  "description": "machine is not on the network",
  "errno": "ENONET"
}

/**
 * Package not installed 
 */
export const ENOPKG = {
  "code": "ENOPKG",
  "errno": 65,
  "description": "Package not installed "
}

/**
 * protocol not available
 */
export const ENOPROTOOPT = {
  "code": "ENOPROTOOPT",
  "description": "protocol not available",
  "errno": "ENOPROTOOPT"
}

/**
 * no space left on device
 */
export const ENOSPC = {
  "code": "ENOSPC",
  "description": "no space left on device",
  "errno": "ENOSPC"
}

/**
 * Out of streams resources 
 */
export const ENOSR = {
  "code": "ENOSR",
  "errno": 63,
  "description": "Out of streams resources "
}

/**
 * Device not a stream 
 */
export const ENOSTR = {
  "code": "ENOSTR",
  "errno": 60,
  "description": "Device not a stream "
}

/**
 * function not implemented
 */
export const ENOSYS = {
  "code": "ENOSYS",
  "description": "function not implemented",
  "errno": "ENOSYS"
}

/**
 * socket is not connected
 */
export const ENOTCONN = {
  "code": "ENOTCONN",
  "description": "socket is not connected",
  "errno": "ENOTCONN"
}

/**
 * not a directory
 */
export const ENOTDIR = {
  "code": "ENOTDIR",
  "description": "not a directory",
  "errno": "ENOTDIR"
}

/**
 * directory not empty
 */
export const ENOTEMPTY = {
  "code": "ENOTEMPTY",
  "description": "directory not empty",
  "errno": "ENOTEMPTY"
}

/**
 * ENOTFOUND
 */
export const ENOTFOUND = {
  "code": "ENOTFOUND",
  "errno": "ENOTFOUND",
  "description": "ENOTFOUND"
}

/**
 * Not a XENIX named type file 
 */
export const ENOTNAM = {
  "code": "ENOTNAM",
  "errno": 118,
  "description": "Not a XENIX named type file "
}

/**
 * State not recoverable 
 */
export const ENOTRECOVERABLE = {
  "code": "ENOTRECOVERABLE",
  "errno": 131,
  "description": "State not recoverable "
}

/**
 * socket operation on non-socket
 */
export const ENOTSOCK = {
  "code": "ENOTSOCK",
  "description": "socket operation on non-socket",
  "errno": "ENOTSOCK"
}

/**
 * operation not supported on socket
 */
export const ENOTSUP = {
  "code": "ENOTSUP",
  "description": "operation not supported on socket",
  "errno": "ENOTSUP"
}

/**
 * inappropriate ioctl for device
 */
export const ENOTTY = {
  "code": "ENOTTY",
  "description": "inappropriate ioctl for device",
  "errno": "ENOTTY"
}

/**
 * Name not unique on network 
 */
export const ENOTUNIQ = {
  "code": "ENOTUNIQ",
  "errno": 76,
  "description": "Name not unique on network "
}

/**
 * no such device or address
 */
export const ENXIO = {
  "code": "ENXIO",
  "description": "no such device or address",
  "errno": "ENXIO"
}

/**
 * end of file
 */
export const EOF = {
  "code": "EOF",
  "description": "end of file",
  "errno": -4095
}

/**
 * Operation not supported on transport endpoint 
 */
export const EOPNOTSUPP = {
  "code": "EOPNOTSUPP",
  "errno": 95,
  "description": "Operation not supported on transport endpoint "
}

/**
 * Value too large for defined data type 
 */
export const EOVERFLOW = {
  "code": "EOVERFLOW",
  "errno": 75,
  "description": "Value too large for defined data type "
}

/**
 * Owner died 
 */
export const EOWNERDEAD = {
  "code": "EOWNERDEAD",
  "errno": 130,
  "description": "Owner died "
}

/**
 * operation not permitted
 */
export const EPERM = {
  "code": "EPERM",
  "description": "operation not permitted",
  "errno": "EPERM"
}

/**
 * Protocol family not supported 
 */
export const EPFNOSUPPORT = {
  "code": "EPFNOSUPPORT",
  "errno": 96,
  "description": "Protocol family not supported "
}

/**
 * broken pipe
 */
export const EPIPE = {
  "code": "EPIPE",
  "description": "broken pipe",
  "errno": "EPIPE"
}

/**
 * protocol error
 */
export const EPROTO = {
  "code": "EPROTO",
  "description": "protocol error",
  "errno": "EPROTO"
}

/**
 * protocol not supported
 */
export const EPROTONOSUPPORT = {
  "code": "EPROTONOSUPPORT",
  "description": "protocol not supported",
  "errno": "EPROTONOSUPPORT"
}

/**
 * protocol wrong type for socket
 */
export const EPROTOTYPE = {
  "code": "EPROTOTYPE",
  "description": "protocol wrong type for socket",
  "errno": "EPROTOTYPE"
}

/**
 * result too large
 */
export const ERANGE = {
  "code": "ERANGE",
  "description": "result too large",
  "errno": "ERANGE"
}

/**
 * Remote address changed 
 */
export const EREMCHG = {
  "code": "EREMCHG",
  "errno": 78,
  "description": "Remote address changed "
}

/**
 * Object is remote 
 */
export const EREMOTE = {
  "code": "EREMOTE",
  "errno": 66,
  "description": "Object is remote "
}

/**
 * remote I/O error
 */
export const EREMOTEIO = {
  "code": "EREMOTEIO",
  "description": "remote I/O error",
  "errno": "EREMOTEIO"
}

/**
 * Interrupted system call should be restarted 
 */
export const ERESTART = {
  "code": "ERESTART",
  "errno": 85,
  "description": "Interrupted system call should be restarted "
}

/**
 * Operation not possible due to RF-kill 
 */
export const ERFKILL = {
  "code": "ERFKILL",
  "errno": 132,
  "description": "Operation not possible due to RF-kill "
}

/**
 * read-only file system
 */
export const EROFS = {
  "code": "EROFS",
  "description": "read-only file system",
  "errno": "EROFS"
}

/**
 * cannot send after transport endpoint shutdown
 */
export const ESHUTDOWN = {
  "code": "ESHUTDOWN",
  "description": "cannot send after transport endpoint shutdown",
  "errno": "ESHUTDOWN"
}

/**
 * Socket type not supported 
 */
export const ESOCKTNOSUPPORT = {
  "code": "ESOCKTNOSUPPORT",
  "errno": 94,
  "description": "Socket type not supported "
}

/**
 * invalid seek
 */
export const ESPIPE = {
  "code": "ESPIPE",
  "description": "invalid seek",
  "errno": "ESPIPE"
}

/**
 * no such process
 */
export const ESRCH = {
  "code": "ESRCH",
  "description": "no such process",
  "errno": "ESRCH"
}

/**
 * Srmount error 
 */
export const ESRMNT = {
  "code": "ESRMNT",
  "errno": 69,
  "description": "Srmount error "
}

/**
 * Stale file handle 
 */
export const ESTALE = {
  "code": "ESTALE",
  "errno": 116,
  "description": "Stale file handle "
}

/**
 * Streams pipe error 
 */
export const ESTRPIPE = {
  "code": "ESTRPIPE",
  "errno": 86,
  "description": "Streams pipe error "
}

/**
 * Timer expired 
 */
export const ETIME = {
  "code": "ETIME",
  "errno": 62,
  "description": "Timer expired "
}

/**
 * connection timed out
 */
export const ETIMEDOUT = {
  "code": "ETIMEDOUT",
  "description": "connection timed out",
  "errno": "ETIMEDOUT"
}

/**
 * Too many references: cannot splice 
 */
export const ETOOMANYREFS = {
  "code": "ETOOMANYREFS",
  "errno": 109,
  "description": "Too many references: cannot splice "
}

/**
 * text file is busy
 */
export const ETXTBSY = {
  "code": "ETXTBSY",
  "description": "text file is busy",
  "errno": "ETXTBSY"
}

/**
 * Structure needs cleaning 
 */
export const EUCLEAN = {
  "code": "EUCLEAN",
  "errno": 117,
  "description": "Structure needs cleaning "
}

/**
 * Protocol driver not attached 
 */
export const EUNATCH = {
  "code": "EUNATCH",
  "errno": 49,
  "description": "Protocol driver not attached "
}

/**
 * Too many users 
 */
export const EUSERS = {
  "code": "EUSERS",
  "errno": 87,
  "description": "Too many users "
}

/**
 * cross-device link not permitted
 */
export const EXDEV = {
  "code": "EXDEV",
  "description": "cross-device link not permitted",
  "errno": "EXDEV"
}

/**
 * Exchange full 
 */
export const EXFULL = {
  "code": "EXFULL",
  "errno": 54,
  "description": "Exchange full "
}
